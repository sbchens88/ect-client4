{
    "name": "eradani-connect-template",
    "version": "2.6.0",
    "description": "Eradani Connect Template Application",
    "main": "dist/src/app.js",
    "scripts": {
        "start": "node dist/src/app.js",
        "start:debug": "node --inspect dist/src/app.js",
        "test": "npx mocha ./dist/tests",
        "setup": "npm run install-shx && npm run link-keys && npm run reset-git && npm run create-user && npm run create-objects && npm run install-deps && npm install && npm run generate-config && npm run package:release && npm run update-eol && npm run set-permissions",
        "clean": "shx rm -rf dist",
        "docs": "shx echo $OSTYPE | shx grep os400 || (npx typedoc --out docs src && printf \"\u001b[1;36mView Generated Documentation with \u001b[1;32mnpm run view-docs\u001b[0m\")",
        "install-shx": "npm install -g shx && npx shx ln -s /QOpenSys/pkgs/lib/nodejs14/bin/shx /QOpenSys/pkgs/bin/shx || echo \"Failed to install shx\"",
        "install-npm": "cd dist && shx rm -rf node_modules && shx ln -s ../node_modules node_modules && cd ..",
        "install-deps": "((shx echo $OSTYPE | shx grep os400 && yum group install \"Development Tools\" -y && yum install git make-gnu unzip nodejs14 unixODBC unixODBC-devel -y) || shx echo \"Installing without Yum\") && (shx which pm2 || (npm install -g pm2 && shx ln -s /QOpenSys/pkgs/lib/nodejs14/bin/pm2 /QOpenSys/pkgs/bin/pm2) || shx echo \"PM2 already set up\")",
        "reset-git": "((shx rm -rf .git && git init && git add . && git commit -am \"chore(Setup): Clone Eradani TypeScript Template App v2.1.0\") || shx echo \"No remote git repo connected\") && shx echo \"===== Disconnected from template GitHub Repo. You should connect to your own with [git remote add origin <url>] =====\"",
        "link-keys": "(shx ln -s /QOpenSys/opt/eradani/.npmrc .npmrc) || shx echo \"Product Key Link Failed. Consult terminal output for details.\"",
        "create-user": "(shx echo $OSTYPE | shx grep os400 && system \"CRTUSRPRF USRPRF(ECNCT) INLPGM(*NONE) INLMNU(*SIGNOFF) TEXT('Eradani Connect user profile') JOBD(QGPL/QDFTJOBD) MSGQ(QUSRSYS/ECNCT) PWDEXPITV(*NOMAX)\") || shx echo \"ECNCT User Creation Failed\"",
        "create-objects": "(shx echo $OSTYPE | shx grep os400 && (system \"CRTLIB LIB(ECNCTSBS) TEXT('Eradani Connect Subsystem library')\" || shx echo \"Subsystem Library Creation Failed\") && system \"CRTCLS CLS(ECNCTSBS/ECNCTIN) TEXT('Class for Eradani Connect subsystem')\" && system \"CRTJOBQ JOBQ(ECNCTSBS/ECNCTIN) TEXT('Job queue for Eradani Connect jobs')\" && system \"CRTJOBD JOBD(ECNCTSBS/ECNCTIN) JOBQ(ECNCTSBS/ECNCTIN) TEXT('Eradani Connect job description') USER(ECNCT) PRTTXT('Eradani Connect jobs') RQSDTA('call PGM(QP2SHELL) PARM(''/QOpenSys/opt/eradani/eradani-connect-template/start.sh'')')\" && system \"CRTSBSD SBSD(ECNCTSBS/ECNCTIN) POOLS((1 *BASE)) MAXJOBS(30) TEXT('Eradani Connect subsystem description')\" && system \"ADDJOBQE SBSD(ECNCTSBS/ECNCTIN) JOBQ(ECNCTSBS/ECNCTIN) MAXACT(15)\" && system \"ADDRTGE SBSD(ECNCTSBS/ECNCTIN) SEQNBR(9999) CMPVAL(*ANY) PGM(QSYS/QCMD) CLS(ECNCTSBS/ECNCTIN)\" && system \"ADDAJE SBSD(ECNCTSBS/ECNCTIN) JOB(ECNCTIN) JOBD(ECNCTSBS/ECNCTIN)\") || shx echo \"QSYS Object Creation Failed. Consult terminal output for details.\"",
        "update-eol": "shx mv start.sh start.sh.orig && tr -d '\r' < start.sh.orig > start.sh || shx echo \"Failed to update eols\"",
        "set-permissions": "(shx chmod a+x start.sh) && shx echo $OSTYPE | shx grep os400 && (system \"CHGOBJOWN OBJ(ECNCTSBS) OBJTYPE(*LIB) NEWOWN(ECNCT)\" && system \"CHGOWN OBJ('/QSYS.lib/ECNCTSBS.lib/*') NEWOWN(ECNCT)\" && system \"CHGOBJOWN OBJ(ECNCTAPP) OBJTYPE(*LIB) NEWOWN(ECNCT)\" && system \"CHGOWN OBJ('/QSYS.lib/ECNCTAPP.lib/*') NEWOWN(ECNCT)\" && system \"CHGOWN OBJ('/QOpenSys/opt/eradani/eradani-connect-template/') NEWOWN(ECNCT) SUBTREE(*ALL)\") || shx echo \"Object Authority Change Failed. Consult terminal output for details.\"",
        "package:dev": "npm run format && npm run lint && npm run build:dev && npm run copy:dev && npm run config && npm run install-npm && npm run test && npm run docs",
        "package:release": "npm run clean && npm run format && npm run build:release && npm run build-native && npm run copy:release && npm run config && npm run install-npm && npm run test && npm run docs",
        "build:dev": "npx ttsc --p ./tsconfig.json",
        "build:watch": "npx ttsc --p ./tsconfig.json --w",
        "build:release": "npx ttsc --p ./tsconfig.json --sourceMap false",
        "build-native": "(export LIB=ECNCTAPP && cd native && gmake init && gmake clean && gmake && cd ..) || shx echo \"IBM i Asset Build Failed\"",
        "update-native": "git pull && npm run build",
        "format": "npx prettier --write \"./**/*.ts\" \"./**/*.js\" \"./**/*.json\"",
        "lint": "npx eslint \"src/**\"",
        "copy:dev": "(shx mkdir dist/logs || shx echo Logs directory already exists) && shx cp -r tests native LICENSE README.md package.json dist",
        "copy:release": "shx mkdir dist/logs && shx cp -r tests native LICENSE README.md package.json dist",
        "config": "shx cp -r config dist",
        "rotate-keys": "(shx rm ./config/keys/*.key || shx echo \"Generating first-time keys\") && ssh-keygen -f ./config/keys/jwt-private.key -P '' && shx mv ./config/keys/jwt-private.key.pub ./config/keys/jwt-public.key",
        "generate-config": "npm run rotate-keys && shx cp ./config/development.json.sample ./config/development.json && shx cp ./config/development.json ./config/production.json && shx echo {} > ./config/testing.json",
        "view-docs": "start docs/index.html"
    },
    "repository": {
        "type": "git",
        "url": "git+https://github.com/eradani-inc/eradani-connect-template.git"
    },
    "author": "Eradani",
    "homepage": "https://github.com/eradani-inc/eradani-connect-template#readme",
    "dependencies": {
        "@eradani-inc/eradani-connect": "^2.6.2",
        "@types/cors": "^2.8.12",
        "@types/es6-promisify": "^6.0.0",
        "@types/express": "^4.17.13",
        "@types/express-validator": "^3.0.0",
        "@types/jsonwebtoken": "^8.5.5",
        "@types/morgan": "^1.9.3",
        "@types/passport-http-bearer": "^1.0.37",
        "@types/safe-json-stringify": "^1.1.2",
        "@types/swagger-stats": "^0.95.4",
        "@types/swagger-ui-express": "^4.1.3",
        "@typescript-eslint/eslint-plugin": "^4.31.1",
        "@typescript-eslint/eslint-plugin-tslint": "^4.31.1",
        "@typescript-eslint/parser": "^4.31.1",
        "axios": "^0.21.4",
        "body-parser": "^1.19.0",
        "cors": "^2.8.5",
        "es6-promisify": "^7.0.0",
        "eslint-import-resolver-typescript": "^2.5.0",
        "express": "^4.17.1",
        "express-oas-generator": "^1.0.41",
        "express-validator": "^6.12.1",
        "jsonwebtoken": "^8.5.1",
        "morgan": "^1.10.0",
        "passport": "^0.4.1",
        "passport-http-bearer": "^1.0.1",
        "safe-json-stringify": "^1.2.0",
        "sequelize": "^6.6.5",
        "swagger-stats": "^0.99.2",
        "swagger-ui-express": "^4.1.6",
        "winston": "^3.3.3",
        "winston-daily-rotate-file": "^4.5.5"
    },
    "devDependencies": {
        "@types/chai": "^4.2.21",
        "@types/mocha": "^9.0.0",
        "@types/node": "^16.9.1",
        "chai": "^4.3.4",
        "chai-http": "^4.3.0",
        "eslint": "^7.32.0",
        "eslint-config-airbnb-base": "^14.2.1",
        "eslint-config-prettier": "^8.3.0",
        "eslint-plugin-import": "^2.24.2",
        "eslint-plugin-prettier": "^4.0.0",
        "eslint-plugin-promise": "^5.1.0",
        "mocha": "^9.1.1",
        "npm-run-all": "^4.1.5",
        "prettier": "^2.4.0",
        "shx": "^0.3.3",
        "sinon": "^11.1.2",
        "source-map-support": "^0.5.20",
        "tslint": "^6.0.0",
        "ttypescript": "^1.5.12",
        "typedoc": "^0.22.3",
        "typescript": "^4.4.3",
        "typescript-transform-paths": "^3.3.1"
    },
    "optionalDependencies": {
        "@eradani-inc/ec-generate": "^3.5.6"
    }
}
